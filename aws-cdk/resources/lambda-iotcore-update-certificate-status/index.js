"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const cloudevents_1 = require("cloudevents");
const x509_1 = require("@fidm/x509");
const iot = new aws_sdk_1.Iot();
exports.handler = async (event) => {
    console.log(event);
    const requestedCloudEvent = new cloudevents_1.CloudEvent(event);
    const deviceID = requestedCloudEvent.data.device_id;
    const deviceCert = Buffer.from(requestedCloudEvent.data.device_cert, "base64").toString("utf-8");
    const caCert = Buffer.from(requestedCloudEvent.data.ca_cert, "base64").toString("utf-8");
    const status = requestedCloudEvent.data.status;
    const serialNumber = requestedCloudEvent.data.serial_number;
    if (status === "ACTIVE" || status === "INACTIVE" || status === "REVOKED") {
        const searchResponse = await iot.searchIndex({ queryString: `thingName:${deviceID}` }).promise();
        if (searchResponse.things.length === 0) {
            console.log("No results with device ID (" + deviceID + "). Registering device");
            await iot.createThing({ thingName: deviceID }).promise();
            const registerCertificateResponse = await iot.registerCertificate({ certificatePem: deviceCert, caCertificatePem: caCert, status: status }).promise();
            await iot.attachThingPrincipal({ thingName: deviceID, principal: registerCertificateResponse.certificateArn }).promise();
        }
        else if (searchResponse.things.length !== 1) {
            console.log("Inconsistent thing repo: More than one result for the same device ID (" + deviceID + ")");
        }
        else {
            const thing = searchResponse.things[0];
            const principalResponse = await iot.listThingPrincipals({ thingName: thing.thingName, maxResults: 25 }).promise();
            const principals = principalResponse.principals;
            for (const principal of principals) {
                const splitiedPrincipal = principal.split(":");
                const certificateID = splitiedPrincipal[splitiedPrincipal.length - 1].replace("cert/", "");
                const certificateResponse = await iot.describeCertificate({ certificateId: certificateID }).promise();
                const certPem = certificateResponse.certificateDescription.certificatePem;
                const cert = x509_1.Certificate.fromPEM(Buffer.from(certPem, "utf8"));
                if (chunk(cert.serialNumber, 2).join("-") === serialNumber) {
                    await iot.updateCertificate({ newStatus: status, certificateId: certificateID }).promise();
                    return;
                }
            }
            console.log("device does not have the certificate yet. Registering manually");
            const registerCertificateResponse = await iot.registerCertificate({ certificatePem: deviceCert, caCertificatePem: caCert, status: status }).promise();
            await iot.attachThingPrincipal({ thingName: deviceID, principal: registerCertificateResponse.certificateArn }).promise();
        }
    }
};
function chunk(str, n) {
    const ret = [];
    let i;
    let len;
    for (i = 0, len = str.length; i < len; i += n) {
        ret.push(str.substr(i, n));
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,