"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const cloudevents_1 = require("cloudevents");
const x509_1 = require("@fidm/x509");
const iot = new aws_sdk_1.Iot();
const sqs = new aws_sdk_1.SQS();
exports.handler = async (event) => {
    console.log(event);
    const requestParameters = event.detail.requestParameters;
    const newStatus = requestParameters.newStatus;
    const certificateId = requestParameters.certificateId;
    const describeCertResponse = await iot.describeCertificate({ certificateId: certificateId }).promise();
    console.log("caCertificateID" + describeCertResponse.certificateDescription.caCertificateId);
    console.log("certificateId" + certificateId);
    const describeCAResponse = await iot.describeCACertificate({ certificateId: describeCertResponse.certificateDescription.caCertificateId }).promise();
    const caCert = x509_1.Certificate.fromPEM(Buffer.from(describeCAResponse.certificateDescription.certificatePem, "utf8"));
    const cert = x509_1.Certificate.fromPEM(Buffer.from(describeCertResponse.certificateDescription.certificatePem, "utf8"));
    const deviceID = cert.subject.commonName;
    console.log("deviceID: [" + deviceID + "] newStatus:[" + newStatus + "]");
    const cloudEvent = new cloudevents_1.CloudEvent({
        type: "io.lamassu.iotcore.cert.update-status",
        id: "",
        source: "aws/cloud-trail",
        time: new Date().toString(),
        specversion: "1.0",
        data: {
            caID: describeCertResponse.certificateDescription.caCertificateId,
            caName: caCert.subject.commonName,
            caSerialNumber: caCert.serialNumber,
            certificateID: certificateId,
            deviceID: deviceID
        }
    });
    try {
        const sqsResponse = await sqs.sendMessage({ QueueUrl: process.env.SQS_RESPONSE_QUEUE_URL, MessageBody: cloudEvent.toString() }).promise();
        console.log(sqsResponse);
    }
    catch (err) {
        console.log("error while sending SQS messgae", err);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBa0M7QUFDbEMsNkNBQXdDO0FBQ3hDLHFDQUF3QztBQUV4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsRUFBRSxDQUFBO0FBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxFQUFFLENBQUE7QUFFUixRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNsQixNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUE7SUFDeEQsTUFBTSxTQUFTLEdBQVcsaUJBQWlCLENBQUMsU0FBUyxDQUFBO0lBQ3JELE1BQU0sYUFBYSxHQUFXLGlCQUFpQixDQUFDLGFBQWEsQ0FBQTtJQUU3RCxNQUFNLG9CQUFvQixHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFFdEcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxvQkFBb0IsQ0FBQyxzQkFBdUIsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUM3RixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxhQUFhLENBQUMsQ0FBQTtJQUU1QyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixDQUFDLHNCQUF1QixDQUFDLGVBQWdCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRXRKLE1BQU0sTUFBTSxHQUFHLGtCQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsc0JBQXVCLENBQUMsY0FBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDbkgsTUFBTSxJQUFJLEdBQUcsa0JBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxzQkFBdUIsQ0FBQyxjQUFlLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUVuSCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQTtJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxRQUFRLEdBQUcsZUFBZSxHQUFHLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUV6RSxNQUFNLFVBQVUsR0FBRyxJQUFJLHdCQUFVLENBQUM7UUFDaEMsSUFBSSxFQUFFLHVDQUF1QztRQUM3QyxFQUFFLEVBQUUsRUFBRTtRQUNOLE1BQU0sRUFBRSxpQkFBaUI7UUFDekIsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQzNCLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxzQkFBdUIsQ0FBQyxlQUFlO1lBQ2xFLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVU7WUFDakMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxZQUFZO1lBQ25DLGFBQWEsRUFBRSxhQUFhO1lBQzVCLFFBQVEsRUFBRSxRQUFRO1NBQ25CO0tBQ0YsQ0FBQyxDQUFBO0lBQ0YsSUFBSTtRQUNGLE1BQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUF1QixFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7S0FDekI7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxDQUFDLENBQUE7S0FDcEQ7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb3QsIFNRUyB9IGZyb20gXCJhd3Mtc2RrXCJcbmltcG9ydCB7IENsb3VkRXZlbnQgfSBmcm9tIFwiY2xvdWRldmVudHNcIlxuaW1wb3J0IHsgQ2VydGlmaWNhdGUgfSBmcm9tIFwiQGZpZG0veDUwOVwiXG5cbmNvbnN0IGlvdCA9IG5ldyBJb3QoKVxuY29uc3Qgc3FzID0gbmV3IFNRUygpXG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkpID0+IHtcbiAgY29uc29sZS5sb2coZXZlbnQpXG4gIGNvbnN0IHJlcXVlc3RQYXJhbWV0ZXJzID0gZXZlbnQuZGV0YWlsLnJlcXVlc3RQYXJhbWV0ZXJzXG4gIGNvbnN0IG5ld1N0YXR1czogc3RyaW5nID0gcmVxdWVzdFBhcmFtZXRlcnMubmV3U3RhdHVzXG4gIGNvbnN0IGNlcnRpZmljYXRlSWQ6IHN0cmluZyA9IHJlcXVlc3RQYXJhbWV0ZXJzLmNlcnRpZmljYXRlSWRcblxuICBjb25zdCBkZXNjcmliZUNlcnRSZXNwb25zZSA9IGF3YWl0IGlvdC5kZXNjcmliZUNlcnRpZmljYXRlKHsgY2VydGlmaWNhdGVJZDogY2VydGlmaWNhdGVJZCB9KS5wcm9taXNlKClcblxuICBjb25zb2xlLmxvZyhcImNhQ2VydGlmaWNhdGVJRFwiICsgZGVzY3JpYmVDZXJ0UmVzcG9uc2UuY2VydGlmaWNhdGVEZXNjcmlwdGlvbiEuY2FDZXJ0aWZpY2F0ZUlkKVxuICBjb25zb2xlLmxvZyhcImNlcnRpZmljYXRlSWRcIiArIGNlcnRpZmljYXRlSWQpXG5cbiAgY29uc3QgZGVzY3JpYmVDQVJlc3BvbnNlID0gYXdhaXQgaW90LmRlc2NyaWJlQ0FDZXJ0aWZpY2F0ZSh7IGNlcnRpZmljYXRlSWQ6IGRlc2NyaWJlQ2VydFJlc3BvbnNlLmNlcnRpZmljYXRlRGVzY3JpcHRpb24hLmNhQ2VydGlmaWNhdGVJZCEgfSkucHJvbWlzZSgpXG5cbiAgY29uc3QgY2FDZXJ0ID0gQ2VydGlmaWNhdGUuZnJvbVBFTShCdWZmZXIuZnJvbShkZXNjcmliZUNBUmVzcG9uc2UuY2VydGlmaWNhdGVEZXNjcmlwdGlvbiEuY2VydGlmaWNhdGVQZW0hLCBcInV0ZjhcIikpXG4gIGNvbnN0IGNlcnQgPSBDZXJ0aWZpY2F0ZS5mcm9tUEVNKEJ1ZmZlci5mcm9tKGRlc2NyaWJlQ2VydFJlc3BvbnNlLmNlcnRpZmljYXRlRGVzY3JpcHRpb24hLmNlcnRpZmljYXRlUGVtISwgXCJ1dGY4XCIpKVxuXG4gIGNvbnN0IGRldmljZUlEID0gY2VydC5zdWJqZWN0LmNvbW1vbk5hbWVcbiAgY29uc29sZS5sb2coXCJkZXZpY2VJRDogW1wiICsgZGV2aWNlSUQgKyBcIl0gbmV3U3RhdHVzOltcIiArIG5ld1N0YXR1cyArIFwiXVwiKVxuXG4gIGNvbnN0IGNsb3VkRXZlbnQgPSBuZXcgQ2xvdWRFdmVudCh7XG4gICAgdHlwZTogXCJpby5sYW1hc3N1LmlvdGNvcmUuY2VydC51cGRhdGUtc3RhdHVzXCIsXG4gICAgaWQ6IFwiXCIsXG4gICAgc291cmNlOiBcImF3cy9jbG91ZC10cmFpbFwiLFxuICAgIHRpbWU6IG5ldyBEYXRlKCkudG9TdHJpbmcoKSxcbiAgICBzcGVjdmVyc2lvbjogXCIxLjBcIixcbiAgICBkYXRhOiB7XG4gICAgICBjYUlEOiBkZXNjcmliZUNlcnRSZXNwb25zZS5jZXJ0aWZpY2F0ZURlc2NyaXB0aW9uIS5jYUNlcnRpZmljYXRlSWQsXG4gICAgICBjYU5hbWU6IGNhQ2VydC5zdWJqZWN0LmNvbW1vbk5hbWUsXG4gICAgICBjYVNlcmlhbE51bWJlcjogY2FDZXJ0LnNlcmlhbE51bWJlcixcbiAgICAgIGNlcnRpZmljYXRlSUQ6IGNlcnRpZmljYXRlSWQsXG4gICAgICBkZXZpY2VJRDogZGV2aWNlSURcbiAgICB9XG4gIH0pXG4gIHRyeSB7XG4gICAgY29uc3Qgc3FzUmVzcG9uc2UgPSBhd2FpdCBzcXMuc2VuZE1lc3NhZ2UoeyBRdWV1ZVVybDogcHJvY2Vzcy5lbnYuU1FTX1JFU1BPTlNFX1FVRVVFX1VSTCEsIE1lc3NhZ2VCb2R5OiBjbG91ZEV2ZW50LnRvU3RyaW5nKCkgfSkucHJvbWlzZSgpXG4gICAgY29uc29sZS5sb2coc3FzUmVzcG9uc2UpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKFwiZXJyb3Igd2hpbGUgc2VuZGluZyBTUVMgbWVzc2dhZVwiLCBlcnIpXG4gIH1cbn1cbiJdfQ==