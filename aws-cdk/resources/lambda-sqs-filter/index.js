"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const cloudevents_1 = require("cloudevents");
const lambda = new aws_sdk_1.Lambda();
exports.handler = async (event, context) => {
    try {
        for (const record of event.Records) {
            console.log("Message Body -->  ", record.body);
            const cloudEvent = new cloudevents_1.CloudEvent(JSON.parse(record.body));
            switch (cloudEvent.type) {
                case "io.lamassu.iotcore.ca.registration.request-code":
                    await execLambda(process.env.LAMBDA_CA_REGISTRATION_INIT, cloudEvent);
                    break;
                case "io.lamassu.iotcore.ca.registration.signed-code":
                    await execLambda(process.env.LAMBDA_IMPORT_IOTCORE_CA, cloudEvent);
                    break;
                case "io.lamassu.iotcore.ca.policy.attach":
                    await execLambda(process.env.LAMBDA_ATTACH_IOTCORE_CA_POLICY, cloudEvent);
                    break;
                case "io.lamassu.iotcore.config.request":
                    await execLambda(process.env.LAMBDA_GET_IOTCORE_CONFIG, cloudEvent);
                    break;
                case "io.lamassu.iotcore.thing.config.request":
                    await execLambda(process.env.LAMBDA_GET_IOTCORE_THING_CONFIG, cloudEvent);
                    break;
                case "io.lamassu.iotcore.cert.status.update":
                    await execLambda(process.env.LAMBDA_UPDATE_IOTCORE_CERT_STATUS, cloudEvent);
                    break;
                default:
                    break;
            }
        }
    }
    catch (error) {
        console.log(error);
    }
};
const execLambda = async (functionName, event) => {
    if (typeof functionName === "string") {
        return lambda.invoke({
            FunctionName: functionName,
            Payload: JSON.stringify(event),
            LogType: "None" // pass params
        }).promise();
    }
    else {
        throw Error("missing lambda name");
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBZ0M7QUFDaEMsNkNBQXdDO0FBRXhDLE1BQU0sTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFBO0FBRWQsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQWUsRUFBRSxPQUFnQixFQUFFLEVBQUU7SUFDakUsSUFBSTtRQUNGLEtBQUssTUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUM5QyxNQUFNLFVBQVUsR0FBRyxJQUFJLHdCQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUUxRCxRQUFRLFVBQVUsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3ZCLEtBQUssaURBQWlEO29CQUNwRCxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUE0QixFQUFFLFVBQVUsQ0FBQyxDQUFBO29CQUN0RSxNQUFLO2dCQUNQLEtBQUssZ0RBQWdEO29CQUNuRCxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF5QixFQUFFLFVBQVUsQ0FBQyxDQUFBO29CQUNuRSxNQUFLO2dCQUNQLEtBQUsscUNBQXFDO29CQUN4QyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUFnQyxFQUFFLFVBQVUsQ0FBQyxDQUFBO29CQUMxRSxNQUFLO2dCQUNQLEtBQUssbUNBQW1DO29CQUN0QyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUEwQixFQUFFLFVBQVUsQ0FBQyxDQUFBO29CQUNwRSxNQUFLO2dCQUNQLEtBQUsseUNBQXlDO29CQUM1QyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUFnQyxFQUFFLFVBQVUsQ0FBQyxDQUFBO29CQUMxRSxNQUFLO2dCQUNQLEtBQUssdUNBQXVDO29CQUMxQyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFrQyxFQUFFLFVBQVUsQ0FBQyxDQUFBO29CQUM1RSxNQUFLO2dCQUVQO29CQUNFLE1BQUs7YUFDUjtTQUNGO0tBQ0Y7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDbkI7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsWUFBZ0MsRUFBRSxLQUFpQixFQUFFLEVBQUU7SUFDL0UsSUFBSSxPQUFPLFlBQVksS0FBSyxRQUFRLEVBQUU7UUFDcEMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ25CLFlBQVksRUFBRSxZQUFZO1lBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUM5QixPQUFPLEVBQUUsTUFBTSxDQUFDLGNBQWM7U0FDL0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0tBQ2I7U0FBTTtRQUNMLE1BQU0sS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7S0FDbkM7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTUVNFdmVudCwgQ29udGV4dCB9IGZyb20gXCJhd3MtbGFtYmRhXCJcbmltcG9ydCB7IExhbWJkYSB9IGZyb20gXCJhd3Mtc2RrXCJcbmltcG9ydCB7IENsb3VkRXZlbnQgfSBmcm9tIFwiY2xvdWRldmVudHNcIlxuXG5jb25zdCBsYW1iZGEgPSBuZXcgTGFtYmRhKClcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IFNRU0V2ZW50LCBjb250ZXh0OiBDb250ZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgZm9yIChjb25zdCByZWNvcmQgb2YgZXZlbnQuUmVjb3Jkcykge1xuICAgICAgY29uc29sZS5sb2coXCJNZXNzYWdlIEJvZHkgLS0+ICBcIiwgcmVjb3JkLmJvZHkpXG4gICAgICBjb25zdCBjbG91ZEV2ZW50ID0gbmV3IENsb3VkRXZlbnQoSlNPTi5wYXJzZShyZWNvcmQuYm9keSkpXG5cbiAgICAgIHN3aXRjaCAoY2xvdWRFdmVudC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJpby5sYW1hc3N1LmlvdGNvcmUuY2EucmVnaXN0cmF0aW9uLnJlcXVlc3QtY29kZVwiOlxuICAgICAgICAgIGF3YWl0IGV4ZWNMYW1iZGEocHJvY2Vzcy5lbnYuTEFNQkRBX0NBX1JFR0lTVFJBVElPTl9JTklUISwgY2xvdWRFdmVudClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwiaW8ubGFtYXNzdS5pb3Rjb3JlLmNhLnJlZ2lzdHJhdGlvbi5zaWduZWQtY29kZVwiOlxuICAgICAgICAgIGF3YWl0IGV4ZWNMYW1iZGEocHJvY2Vzcy5lbnYuTEFNQkRBX0lNUE9SVF9JT1RDT1JFX0NBISwgY2xvdWRFdmVudClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwiaW8ubGFtYXNzdS5pb3Rjb3JlLmNhLnBvbGljeS5hdHRhY2hcIjpcbiAgICAgICAgICBhd2FpdCBleGVjTGFtYmRhKHByb2Nlc3MuZW52LkxBTUJEQV9BVFRBQ0hfSU9UQ09SRV9DQV9QT0xJQ1khLCBjbG91ZEV2ZW50KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJpby5sYW1hc3N1LmlvdGNvcmUuY29uZmlnLnJlcXVlc3RcIjpcbiAgICAgICAgICBhd2FpdCBleGVjTGFtYmRhKHByb2Nlc3MuZW52LkxBTUJEQV9HRVRfSU9UQ09SRV9DT05GSUchLCBjbG91ZEV2ZW50KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJpby5sYW1hc3N1LmlvdGNvcmUudGhpbmcuY29uZmlnLnJlcXVlc3RcIjpcbiAgICAgICAgICBhd2FpdCBleGVjTGFtYmRhKHByb2Nlc3MuZW52LkxBTUJEQV9HRVRfSU9UQ09SRV9USElOR19DT05GSUchLCBjbG91ZEV2ZW50KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJpby5sYW1hc3N1LmlvdGNvcmUuY2VydC5zdGF0dXMudXBkYXRlXCI6XG4gICAgICAgICAgYXdhaXQgZXhlY0xhbWJkYShwcm9jZXNzLmVudi5MQU1CREFfVVBEQVRFX0lPVENPUkVfQ0VSVF9TVEFUVVMhLCBjbG91ZEV2ZW50KVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgfVxufVxuXG5jb25zdCBleGVjTGFtYmRhID0gYXN5bmMgKGZ1bmN0aW9uTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBldmVudDogQ2xvdWRFdmVudCkgPT4ge1xuICBpZiAodHlwZW9mIGZ1bmN0aW9uTmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBsYW1iZGEuaW52b2tlKHtcbiAgICAgIEZ1bmN0aW9uTmFtZTogZnVuY3Rpb25OYW1lLFxuICAgICAgUGF5bG9hZDogSlNPTi5zdHJpbmdpZnkoZXZlbnQpLFxuICAgICAgTG9nVHlwZTogXCJOb25lXCIgLy8gcGFzcyBwYXJhbXNcbiAgICB9KS5wcm9taXNlKClcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcihcIm1pc3NpbmcgbGFtYmRhIG5hbWVcIilcbiAgfVxufVxuIl19